@page "/"
@using WorkSchedule.Applications.WorkSchedule
@using WorkSchedule.Domain.ValueObject
@attribute [StreamRendering]
@attribute [RenderModeInteractiveServer]

@inject WorkScheduleHandler Handler

<PageTitle>Home</PageTitle>

<h1>Home</h1>

<div class=" row">
	<div class="input-group mb-3">
		<span class="input-group-text">Year</span>
		<InputNumber @bind-Value="				Year" class="form-control" />
		<span class="input-group-text">Month</span>
		<InputNumber @bind-Value="				Month" class="form-control" />
	</div>
</div>
<hr />

<EditForm Model="@Model" OnSubmit="@Add">
	<div class=" row">
		<div class="input-group mb-3">
			<span class="input-group-text">Name</span>
			<InputText @bind-Value="						Model!.Name" class="form-control" type="text" />

			<span class="input-group-text">IgnoreDays</span>
			<InputText @bind-Value="						Model!.IgnoreDays" class="form-control" type="text" />

			<button class="btn btn-outline-secondary" type="submit">Add</button>
			<button class="btn btn-outline-secondary" @OnClick="CleanMembers">Clean</button>
		</div>
	</div>
</EditForm>

@if (Members.Any())
{
	<table class="table table-striped">
		<thead>
		<tr>
			<th scope="col">#</th>
			<th scope="col">Name</th>
			<th scope="col">IgnoreDays</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var member in Members)
		{
			<tr>
				<th scope="row">@(Members.IndexOf(member) + 1)</th>
				<td>@member.Name</td>
				<td>@string.Join(", ", member.IgnoreDays.Select(r => r.Day))</td>
			</tr>
		}
		</tbody>
	</table>
}

<hr />
<button class="btn btn-primary" @onclick="Submit">Generate</button>

<div>
	@if (Result.Any())
	{
		<table class="table table-striped">
			<thead>
			<tr>
				<th>Day</th>
				<th>First</th>
				<th>Second</th>
				<th>IsHoliday</th>
			</tr>
			</thead>
			<tbody>
			@foreach (var item in Result)
			{
				<tr>
					<td>@($"{item.Date.Day}（{item.Date.DayOfWeek:G}）")</td>
					<td>@item.First</td>
					<td>@item.Second</td>
					<td>@item.IsHoliday</td>
				</tr>
			}
			</tbody>
		</table>
		<hr />
		<table class="table table-striped">
			<thead>
			<th>Name</th>
			<th>主-平日</th>
			<th>假日</th>
			<th>副-平日</th>
			<th>假日</th>
			</thead>
			<tbody>
			@foreach (var member in Result.Select(r => r.First).Distinct())
			{
				<tr>
					<td>@member</td>
					<td>@Result.Count(r => r.First == member && !r.IsHoliday)</td>
					<td>@Result.Count(r => r.First == member && r.IsHoliday)</td>
					<td>@Result.Count(r => r.Second == member && !r.IsHoliday)</td>
					<td>@Result.Count(r => r.Second == member && r.IsHoliday)</td>
				</tr>
			}
			</tbody>
		</table>
	}
</div>

@code {

	public WorkMember? Model { get; set; }

	private List<MemberWorkDay> Members { get; set; } = new();

	private int Year { get; set; } = 2023;

	private int Month { get; set; } = 11;

	private List<WorkScheduleViewModel> Result { get; set; } = new();

	protected override Task OnInitializedAsync()
	{
		Model = new WorkMember();
		return base.OnInitializedAsync();
	}

	private void Add()
	{
		var name = Model!.Name;
		if (string.IsNullOrWhiteSpace(name))
		{
			Model = new WorkMember();
			return;
		}
		if (Members.Any(r => r.Name == name))
		{
			Members.Remove(Members.First(r => r.Name == name));
		}
		Members.Add(new MemberWorkDay
		{
			Name = name ?? "",
			IgnoreDays = Model.IgnoreDays?.Split(',')
				.Select(int.Parse)
				.Select(r => new DateTime(Year, Month, r))
				.ToList() ?? new List<DateTime>()
		});
		Model = new WorkMember();
	}

	private async Task Submit()
	{
		if (Members.Any() == false)
		{
			return;
		}

		var result = await Handler.Handle(new WorkScheduleCommand
		{
			Date = new DateObject(Year, Month),
			Members = Members.Select(r => new MemberWorkDay
			{
				Name = r.Name,
				IgnoreDays = new List<DateTime>(r.IgnoreDays)
			}).ToList()
		});

		Result = result.ScheduleFirst
			.OrderBy(r => r.Date)
			.Zip(result.ScheduleSecond)
			.Select(r => new WorkScheduleViewModel
			{
				Date = r.First.Date,
				First = r.First.Person,
				Second = r.Second.Person,
				IsHoliday = r.First.IsHoliday
			})
			.ToList();
	}

	public class WorkMember
	{
		public string? Name { get; set; }

		public string? IgnoreDays { get; set; }
	}

	private void CleanMembers()
	{
		Members = new List<MemberWorkDay>();
	}

}